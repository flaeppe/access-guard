{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Access guard A forward authentication service that provides email verification. Overview Limit visitors to only those who successfully verify via email. Where you define which email addresses are allowed to verify. Provides a great alternative to protecting services with basic auth . As there's no need for either shared or individual login credentials. Access guard ships as a docker image and can be started up as an independent service. Have a look at \"How it works\" to get a better idea of what Access guard will be doing. Note You will need an SMTP server that Access guard can configure its SMTP client to send verification emails to. Use cases traefik Access guard is compatible with traefik's forward auth . View \"Use with traefik's forward auth\" for a walk-through of a configuration example.","title":"Introduction"},{"location":"#access-guard","text":"A forward authentication service that provides email verification.","title":"Access guard"},{"location":"#overview","text":"Limit visitors to only those who successfully verify via email. Where you define which email addresses are allowed to verify. Provides a great alternative to protecting services with basic auth . As there's no need for either shared or individual login credentials. Access guard ships as a docker image and can be started up as an independent service. Have a look at \"How it works\" to get a better idea of what Access guard will be doing. Note You will need an SMTP server that Access guard can configure its SMTP client to send verification emails to.","title":"Overview"},{"location":"#use-cases","text":"","title":"Use cases"},{"location":"#traefik","text":"Access guard is compatible with traefik's forward auth . View \"Use with traefik's forward auth\" for a walk-through of a configuration example.","title":"traefik"},{"location":"how_it_works/","text":"The entrypoint path to the Access guard service is /auth . This is where a forwarder should send a request to check if access should be granted or not. This should be the only path that will have to be considered by a forwarding party. An Access guard response to a forwarded request with a 2XX status code means that access is granted and the original request should be performed. A request resulting in any other status code, Access guard expects the forwarder to return the response from Access guard to the client. When an incoming request on /auth could not result in a response granting access (i.e. result in a 2XX status code); Access guard looks for the following X-Forwarded- headers to initiate its email verification flow: Forward-Request Header Property X-Forwarded-Method HTTP Method X-Forwarded-Proto Protocol X-Forwarded-Host Host X-Forwarded-Uri Request URI X-Forwarded-For Source IP-Address Warning If any of the X-Forwarded- headers in the table above is missing from the request, the verification flow will not be initiated and a client will instead be presented with a 401 status code response. In other words; all of those headers are required. At the first stage of the email verification flow a client will be asked to enter an email address, this email address will receive an email containing a \"magic link\", given that the email address is accepted by Access guard. Info If an email address that is not accepted by Access guard is posted, the client will still be shown a \"check your inbox\" page. Although Access guard will not have sent any verification email to such addresses. When a \"magic link\" in an email is clicked, Access guard will verify its signature. And if successful, redirect the client to the destination that can be assembled from the X-Forwarded- headers that were sent by the forwarder on the request that initiated the verification flow. Access guard also attaches a cookie to this redirect, granting future requests access for a limited amount of time. Given that the value of the cookie has not been tampered with.","title":"How it works"},{"location":"reference/","text":"Info The entrypoint path to the Access guard service is /auth . This is where a forwarder should send a request to check if access should be granted or not. Prerequisites An SMTP server that Access guard can configure its SMTP client to send verification emails to. Command line arguments $ docker run --rm ghcr.io/flaeppe/access-guard:latest --help usage: access-guard [-h] (-s SECRET | -sf PATH_TO_FILE) -a AUTH_HOST -t TRUSTED_HOST [TRUSTED_HOST ...] -c COOKIE_DOMAIN [-V] [-d] [--host HOST] [--port PORT] [--log-formatter {json,console}] --email-host EMAIL_HOST --email-port EMAIL_PORT --from-email FROM_EMAIL [--email-username EMAIL_USERNAME] [--email-password EMAIL_PASSWORD | --email-password-file PATH_TO_FILE] [--email-use-tls | --email-start-tls] [--email-no-validate-certs] [--email-client-cert EMAIL_CLIENT_CERT] [--email-client-key EMAIL_CLIENT_KEY] [--email-subject EMAIL_SUBJECT] [--cookie-secure] [--auth-cookie-name AUTH_COOKIE_NAME] [--verified-cookie-name VERIFIED_COOKIE_NAME] [--auth-cookie-max-age AUTH_COOKIE_MAX_AGE] [--auth-signature-max-age AUTH_SIGNATURE_MAX_AGE] [--verify-signature-max-age VERIFY_SIGNATURE_MAX_AGE] EMAIL_PATTERN [EMAIL_PATTERN ...] ... positional arguments: EMAIL_PATTERN Email addresses to match, each compiled to a regex options: -h, --help show this help message and exit -V, --version show program's version number and exit -d, --debug --host HOST Server host. [default: 0.0.0.0] --port PORT Server port. [default: 8585] --log-formatter {json,console} Log output format [default: json] Required arguments: -s SECRET, --secret SECRET Secret key -sf PATH_TO_FILE, --secret-file PATH_TO_FILE Secret key file -a AUTH_HOST, --auth-host AUTH_HOST The entrypoint url for access guard, with protocol and path -t TRUSTED_HOST [TRUSTED_HOST ...], --trusted-hosts TRUSTED_HOST [TRUSTED_HOST ...] Hosts/domain names that access guard should serve. Matched against a request's Host header. Wildcard domains such as '*.example.com' are supported for matching subdomains. To allow any hostname use: * -c COOKIE_DOMAIN, --cookie-domain COOKIE_DOMAIN The domain to use for cookies. Ensure this value covers domain set for AUTH_HOST Required email arguments: SMTP/Email specific configuration --email-host EMAIL_HOST The host to use for sending emails --email-port EMAIL_PORT Port to use for the SMTP server defined in --email- host --from-email FROM_EMAIL What will become the sender's address in sent emails Optional email arguments: SMTP/Email specific configuration --email-username EMAIL_USERNAME Username to login with on configured SMTP server [default: unset] --email-password EMAIL_PASSWORD Password to login with on configured SMTP server [default: unset] --email-password-file PATH_TO_FILE File containing password to login with on configured SMTP server [default: unset] --email-use-tls Make the _initial_ connection to the SMTP server over TLS/SSL [default: false] --email-start-tls Make the initial connection to the SMTP server over plaintext, and then upgrade the connection to TLS/SSL [default: false] --email-no-validate-certs Disable validating server certificates for SMTP [default: false] --email-client-cert EMAIL_CLIENT_CERT Path to client side certificate, for TLS verification [default: unset] --email-client-key EMAIL_CLIENT_KEY Path to client side key, for TLS verification [default: unset] --email-subject EMAIL_SUBJECT Subject of the email sent for verification [default: Access guard verification] Optional cookie arguments: Configuration for cookies --cookie-secure Whether to only use secure cookies. When passed, cookies will be marked as 'secure' [default: false] --auth-cookie-name AUTH_COOKIE_NAME Name for cookie used during auth flow [default: access-guard-forwarded] --verified-cookie-name VERIFIED_COOKIE_NAME Name for cookie set when auth completed successfully [default: access-guard-session] --auth-cookie-max-age AUTH_COOKIE_MAX_AGE Seconds before the cookie set _during_ auth flow should expire [default: 3600 (1 hour)] --auth-signature-max-age AUTH_SIGNATURE_MAX_AGE Decides how many seconds a verification email should be valid. When the amount of seconds has passed, the client has to request a new email. [default: 600 (10 minutes)] --verify-signature-max-age VERIFY_SIGNATURE_MAX_AGE Decides how many seconds a verified session cookie should be valid. When the amount of seconds has passed, the client has to verify again. [default: 86400 (24 hours)] Arguments reference Required arguments Email patterns EMAIL_PATTERN [EMAIL_PATTERN ...] Positional argument Email address patterns to match for being allowed possibility to verify and access. All entered patterns are case insensitively matched with emails entered by a client. Example *@email.com someone@else.com Secret -s/--secret SECRET Should be set to a unique, unpredictable value. Is used for cryptographic signing. Warning Both --secret and --secret-file can not be passed at the same time Secret file -sf/--secret-file PATH_TO_FILE As an alternative to passing the secret via command line, the value can be loaded from a file present in the container. Example --secret-file /run/secrets/access-guard-secret Only the first line of the secret file will be read and any newline character at the end of it will be removed. Warning If the first line is empty after any newline character has been removed, an error will be raised. Warning Both --secret-file and --secret can not be passed at the same time. Access guard's host -a/--auth-host AUTH_HOST The configured url for the access guard service, with protocol and path. The service wants to know this to redirect unverified clients in to the verification flow. Example --auth-host http://auth.localhost.com/ Trusted hosts -t/--trusted-hosts TRUSTED_HOST [TRUSTED_HOST ...] Hosts/domain names that access guard should serve. Matched against a request's Host header. Wildcard domains are supported for matching subdomains. Remember that for usage with docker and traefik, the name of the access guard service could be a trusted host. That'll allow the forwardauth middleware to configure an address resolved via a docker network. For example (via label/docker configuration): traefik.http.middlewares.access-guard.forwardauth.address: \"http://access-guard:8585/auth\" Example Multiple hosts Wildcard subdomains Any hostname --trusted-hosts access-guard auth.localhost.com --trusted-hosts *.localhost.com --trusted-hosts * Cookie domain -c/--cookie-domain COOKIE_DOMAIN The domain to use for cookies. Ensure this value covers the domain set for --auth-host . With an auth host configuration of: --auth-host http://auth.localhost.com/ We can set a cookie domain configuration like --cookie-domain localhost.com That'll allow a verification cookie to follow along to, for example, the hosts: service_1.localhost.com service_2.localhost.com SMTP host --email-host EMAIL_HOST The host to use for sending of emails Example --email-host 172.18.0.1 SMTP port --email-port EMAIL_PORT Port to use for the SMTP server defined in --email-host Example --email-port 25 Sender's email address --from-email FROM_EMAIL What will become the sender's address in sent emails. Example --from-email verificator@email.com Example using minimal arguments docker run --rm ghcr.io/flaeppe/access-guard:latest \\ \".*@test.com\" \\ --secret supersecret \\ --auth-host http://access-guard.localhost.com/ \\ --trusted-hosts access-guard access-guard.localhost.com \\ --cookie-domain localhost.com \\ --email-host mailhog \\ --email-port 1025 \\ --from-email access-guard@local.com Optional arguments Bind host --host HOST The socket that access guard's server should bind to. This will be inside of a running container. Default value 0.0.0.0 Bind port --port PORT The port that access guard's server should bind to. This will be inside of a running container. Default value 8585 Log formatter --log-formatter Log output format, available choices are json or console Default value json SMTP client username --email-username EMAIL_USERNAME Username to login with on configured SMTP server Default value Not set SMTP client password --email-password EMAIL_PASSWORD Password to login with on configured SMTP server Default value Not set Warning Both --email-password and --email-password-file can not be passed at the same time SMTP client password file --email-password-file PATH_TO_FILE As an alternative to passing a password via command line, the value can be loaded from a file present in the container. Only the first line of the password file will be read and any newline character at the end of it will be removed. Example --email-password-file /run/secrets/email-passwd Default value Not set Warning If the first line is empty after any newline character has been removed, an error will be raised. Warning Both --email-password-file and --email-password can not be passed at the same time SMTP client use TLS --email-use-tls Make the initial connection to the SMTP server over TLS/SSL. Example --email-use-tls Default value false Warning Both --email-use-tls and --email-start-tls can not be passed at the same time SMTP client start TLS --email-start-tls Make the initial connection to the SMTP server over plaintext, and then upgrade the connection to TLS/SSL. Example --email-start-tls Default value false Warning Both --email-start-tls and --email-use-tls can not be passed at the same time Disable SMTP cert validation --email-no-validate-certs Disable validating server certificates for SMTP Example --email-no-validate-certs Default value false SMTP client TLS cert --email-client-cert EMAIL_CLIENT_CERT Path to client side certificate, for TLS verification Example --email-client-cert /path/to/cert Default value Not set SMTP client TLS key --email-client-key EMAIL_CLIENT_KEY Path to client side key, for TLS verification Example --email-client-key /path/to/key Default value Not set Email subject --email-subject EMAIL_SUBJECT Subject of the email sent for verification Example --email-subject \"Custom email subject line\" Default value \"Access guard verification\" Cookie secure --cookie-secure Whether to only use secure cookies. When passed, cookies will be marked as 'secure' Example --cookie-secure Default value false Auth cookie name --auth-cookie-name AUTH_COOKIE_NAME Name for cookie used during auth flow Example --auth-cookie-name cookie-name Default value access-guard-forwarded Verified cookie name --verified-cookie-name VERIFIED_COOKIE_NAME Name for cookie set when auth completed successfully Example --verified-cookie-name cookie-name Default value access-guard-session Auth cookie max age --auth-cookie-max-age AUTH_COOKIE_MAX_AGE Seconds before the cookie set during auth flow should expire Example --auth-cookie-max-age 600 Default value 3600 (1 hour) Verification email max age --auth-signature-max-age AUTH_SIGNATURE_MAX_AGE Decides how many seconds a verification email should be valid. When the amount of seconds has passed, the client has to request a new email. Example --auth-signature-max-age 300 Default value 600 (10 minutes) Verified session max age --verify-signature-max-age VERIFY_SIGNATURE_MAX_AGE Decides how many seconds a verified session cookie should be valid. When the amount of seconds has passed, the client has to verify again. Example --verify-signature-max-age 43200 Default value 86400 (24 hours) Example using all arguments docker run --rm ghcr.io/flaeppe/access-guard:latest \\ \".*@test.com\" \\ --secret supersecret \\ --auth-host http://access-guard.localhost.com/ \\ --trusted-hosts access-guard access-guard.localhost.com \\ --cookie-domain localhost.com \\ --email-host mailhog \\ --email-port 1025 \\ --from-email access-guard@local.com \\ --host 0 .0.0.0 \\ --port 8585 \\ --email-username email-login \\ --email-password SecreT \\ --email-use-tls \\ --email-no-validate-certs \\ --email-client-cert /run/secret/smtp-cert \\ --email-client-key /run/secret/smtp-key \\ --email-subject \"You need to verify yourself\" \\ --cookie-secure \\ --auth-cookie-name local-access-guard-forwarded \\ --verified-cookie-name local-access-guard-session \\ --auth-cookie-max-age 3600 \\ --auth-signature-max-age 600 \\ --verify-signature-max-age 43200 Note All available arguments aren't included above, since some of them are mutually exclusive. In addition to the ones seen above the following arguments also exists: --secret-file --email-password-file --email-start-tls","title":"Reference"},{"location":"reference/#prerequisites","text":"An SMTP server that Access guard can configure its SMTP client to send verification emails to.","title":"Prerequisites"},{"location":"reference/#command-line-arguments","text":"$ docker run --rm ghcr.io/flaeppe/access-guard:latest --help usage: access-guard [-h] (-s SECRET | -sf PATH_TO_FILE) -a AUTH_HOST -t TRUSTED_HOST [TRUSTED_HOST ...] -c COOKIE_DOMAIN [-V] [-d] [--host HOST] [--port PORT] [--log-formatter {json,console}] --email-host EMAIL_HOST --email-port EMAIL_PORT --from-email FROM_EMAIL [--email-username EMAIL_USERNAME] [--email-password EMAIL_PASSWORD | --email-password-file PATH_TO_FILE] [--email-use-tls | --email-start-tls] [--email-no-validate-certs] [--email-client-cert EMAIL_CLIENT_CERT] [--email-client-key EMAIL_CLIENT_KEY] [--email-subject EMAIL_SUBJECT] [--cookie-secure] [--auth-cookie-name AUTH_COOKIE_NAME] [--verified-cookie-name VERIFIED_COOKIE_NAME] [--auth-cookie-max-age AUTH_COOKIE_MAX_AGE] [--auth-signature-max-age AUTH_SIGNATURE_MAX_AGE] [--verify-signature-max-age VERIFY_SIGNATURE_MAX_AGE] EMAIL_PATTERN [EMAIL_PATTERN ...] ... positional arguments: EMAIL_PATTERN Email addresses to match, each compiled to a regex options: -h, --help show this help message and exit -V, --version show program's version number and exit -d, --debug --host HOST Server host. [default: 0.0.0.0] --port PORT Server port. [default: 8585] --log-formatter {json,console} Log output format [default: json] Required arguments: -s SECRET, --secret SECRET Secret key -sf PATH_TO_FILE, --secret-file PATH_TO_FILE Secret key file -a AUTH_HOST, --auth-host AUTH_HOST The entrypoint url for access guard, with protocol and path -t TRUSTED_HOST [TRUSTED_HOST ...], --trusted-hosts TRUSTED_HOST [TRUSTED_HOST ...] Hosts/domain names that access guard should serve. Matched against a request's Host header. Wildcard domains such as '*.example.com' are supported for matching subdomains. To allow any hostname use: * -c COOKIE_DOMAIN, --cookie-domain COOKIE_DOMAIN The domain to use for cookies. Ensure this value covers domain set for AUTH_HOST Required email arguments: SMTP/Email specific configuration --email-host EMAIL_HOST The host to use for sending emails --email-port EMAIL_PORT Port to use for the SMTP server defined in --email- host --from-email FROM_EMAIL What will become the sender's address in sent emails Optional email arguments: SMTP/Email specific configuration --email-username EMAIL_USERNAME Username to login with on configured SMTP server [default: unset] --email-password EMAIL_PASSWORD Password to login with on configured SMTP server [default: unset] --email-password-file PATH_TO_FILE File containing password to login with on configured SMTP server [default: unset] --email-use-tls Make the _initial_ connection to the SMTP server over TLS/SSL [default: false] --email-start-tls Make the initial connection to the SMTP server over plaintext, and then upgrade the connection to TLS/SSL [default: false] --email-no-validate-certs Disable validating server certificates for SMTP [default: false] --email-client-cert EMAIL_CLIENT_CERT Path to client side certificate, for TLS verification [default: unset] --email-client-key EMAIL_CLIENT_KEY Path to client side key, for TLS verification [default: unset] --email-subject EMAIL_SUBJECT Subject of the email sent for verification [default: Access guard verification] Optional cookie arguments: Configuration for cookies --cookie-secure Whether to only use secure cookies. When passed, cookies will be marked as 'secure' [default: false] --auth-cookie-name AUTH_COOKIE_NAME Name for cookie used during auth flow [default: access-guard-forwarded] --verified-cookie-name VERIFIED_COOKIE_NAME Name for cookie set when auth completed successfully [default: access-guard-session] --auth-cookie-max-age AUTH_COOKIE_MAX_AGE Seconds before the cookie set _during_ auth flow should expire [default: 3600 (1 hour)] --auth-signature-max-age AUTH_SIGNATURE_MAX_AGE Decides how many seconds a verification email should be valid. When the amount of seconds has passed, the client has to request a new email. [default: 600 (10 minutes)] --verify-signature-max-age VERIFY_SIGNATURE_MAX_AGE Decides how many seconds a verified session cookie should be valid. When the amount of seconds has passed, the client has to verify again. [default: 86400 (24 hours)]","title":"Command line arguments"},{"location":"reference/#arguments-reference","text":"","title":"Arguments reference"},{"location":"reference/#required-arguments","text":"","title":"Required arguments"},{"location":"reference/#email-patterns","text":"EMAIL_PATTERN [EMAIL_PATTERN ...] Positional argument Email address patterns to match for being allowed possibility to verify and access. All entered patterns are case insensitively matched with emails entered by a client. Example *@email.com someone@else.com","title":"Email patterns"},{"location":"reference/#secret","text":"-s/--secret SECRET Should be set to a unique, unpredictable value. Is used for cryptographic signing. Warning Both --secret and --secret-file can not be passed at the same time","title":"Secret"},{"location":"reference/#secret-file","text":"-sf/--secret-file PATH_TO_FILE As an alternative to passing the secret via command line, the value can be loaded from a file present in the container. Example --secret-file /run/secrets/access-guard-secret Only the first line of the secret file will be read and any newline character at the end of it will be removed. Warning If the first line is empty after any newline character has been removed, an error will be raised. Warning Both --secret-file and --secret can not be passed at the same time.","title":"Secret file"},{"location":"reference/#access-guards-host","text":"-a/--auth-host AUTH_HOST The configured url for the access guard service, with protocol and path. The service wants to know this to redirect unverified clients in to the verification flow. Example --auth-host http://auth.localhost.com/","title":"Access guard's host"},{"location":"reference/#trusted-hosts","text":"-t/--trusted-hosts TRUSTED_HOST [TRUSTED_HOST ...] Hosts/domain names that access guard should serve. Matched against a request's Host header. Wildcard domains are supported for matching subdomains. Remember that for usage with docker and traefik, the name of the access guard service could be a trusted host. That'll allow the forwardauth middleware to configure an address resolved via a docker network. For example (via label/docker configuration): traefik.http.middlewares.access-guard.forwardauth.address: \"http://access-guard:8585/auth\" Example Multiple hosts Wildcard subdomains Any hostname --trusted-hosts access-guard auth.localhost.com --trusted-hosts *.localhost.com --trusted-hosts *","title":"Trusted hosts"},{"location":"reference/#cookie-domain","text":"-c/--cookie-domain COOKIE_DOMAIN The domain to use for cookies. Ensure this value covers the domain set for --auth-host . With an auth host configuration of: --auth-host http://auth.localhost.com/ We can set a cookie domain configuration like --cookie-domain localhost.com That'll allow a verification cookie to follow along to, for example, the hosts: service_1.localhost.com service_2.localhost.com","title":"Cookie domain"},{"location":"reference/#smtp-host","text":"--email-host EMAIL_HOST The host to use for sending of emails Example --email-host 172.18.0.1","title":"SMTP host"},{"location":"reference/#smtp-port","text":"--email-port EMAIL_PORT Port to use for the SMTP server defined in --email-host Example --email-port 25","title":"SMTP port"},{"location":"reference/#senders-email-address","text":"--from-email FROM_EMAIL What will become the sender's address in sent emails. Example --from-email verificator@email.com","title":"Sender's email address"},{"location":"reference/#example-using-minimal-arguments","text":"docker run --rm ghcr.io/flaeppe/access-guard:latest \\ \".*@test.com\" \\ --secret supersecret \\ --auth-host http://access-guard.localhost.com/ \\ --trusted-hosts access-guard access-guard.localhost.com \\ --cookie-domain localhost.com \\ --email-host mailhog \\ --email-port 1025 \\ --from-email access-guard@local.com","title":"Example using minimal arguments"},{"location":"reference/#optional-arguments","text":"","title":"Optional arguments"},{"location":"reference/#bind-host","text":"--host HOST The socket that access guard's server should bind to. This will be inside of a running container. Default value 0.0.0.0","title":"Bind host"},{"location":"reference/#bind-port","text":"--port PORT The port that access guard's server should bind to. This will be inside of a running container. Default value 8585","title":"Bind port"},{"location":"reference/#log-formatter","text":"--log-formatter Log output format, available choices are json or console Default value json","title":"Log formatter"},{"location":"reference/#smtp-client-username","text":"--email-username EMAIL_USERNAME Username to login with on configured SMTP server Default value Not set","title":"SMTP client username"},{"location":"reference/#smtp-client-password","text":"--email-password EMAIL_PASSWORD Password to login with on configured SMTP server Default value Not set Warning Both --email-password and --email-password-file can not be passed at the same time","title":"SMTP client password"},{"location":"reference/#smtp-client-password-file","text":"--email-password-file PATH_TO_FILE As an alternative to passing a password via command line, the value can be loaded from a file present in the container. Only the first line of the password file will be read and any newline character at the end of it will be removed. Example --email-password-file /run/secrets/email-passwd Default value Not set Warning If the first line is empty after any newline character has been removed, an error will be raised. Warning Both --email-password-file and --email-password can not be passed at the same time","title":"SMTP client password file"},{"location":"reference/#smtp-client-use-tls","text":"--email-use-tls Make the initial connection to the SMTP server over TLS/SSL. Example --email-use-tls Default value false Warning Both --email-use-tls and --email-start-tls can not be passed at the same time","title":"SMTP client use TLS"},{"location":"reference/#smtp-client-start-tls","text":"--email-start-tls Make the initial connection to the SMTP server over plaintext, and then upgrade the connection to TLS/SSL. Example --email-start-tls Default value false Warning Both --email-start-tls and --email-use-tls can not be passed at the same time","title":"SMTP client start TLS"},{"location":"reference/#disable-smtp-cert-validation","text":"--email-no-validate-certs Disable validating server certificates for SMTP Example --email-no-validate-certs Default value false","title":"Disable SMTP cert validation"},{"location":"reference/#smtp-client-tls-cert","text":"--email-client-cert EMAIL_CLIENT_CERT Path to client side certificate, for TLS verification Example --email-client-cert /path/to/cert Default value Not set","title":"SMTP client TLS cert"},{"location":"reference/#smtp-client-tls-key","text":"--email-client-key EMAIL_CLIENT_KEY Path to client side key, for TLS verification Example --email-client-key /path/to/key Default value Not set","title":"SMTP client TLS key"},{"location":"reference/#email-subject","text":"--email-subject EMAIL_SUBJECT Subject of the email sent for verification Example --email-subject \"Custom email subject line\" Default value \"Access guard verification\"","title":"Email subject"},{"location":"reference/#cookie-secure","text":"--cookie-secure Whether to only use secure cookies. When passed, cookies will be marked as 'secure' Example --cookie-secure Default value false","title":"Cookie secure"},{"location":"reference/#auth-cookie-name","text":"--auth-cookie-name AUTH_COOKIE_NAME Name for cookie used during auth flow Example --auth-cookie-name cookie-name Default value access-guard-forwarded","title":"Auth cookie name"},{"location":"reference/#verified-cookie-name","text":"--verified-cookie-name VERIFIED_COOKIE_NAME Name for cookie set when auth completed successfully Example --verified-cookie-name cookie-name Default value access-guard-session","title":"Verified cookie name"},{"location":"reference/#auth-cookie-max-age","text":"--auth-cookie-max-age AUTH_COOKIE_MAX_AGE Seconds before the cookie set during auth flow should expire Example --auth-cookie-max-age 600 Default value 3600 (1 hour)","title":"Auth cookie max age"},{"location":"reference/#verification-email-max-age","text":"--auth-signature-max-age AUTH_SIGNATURE_MAX_AGE Decides how many seconds a verification email should be valid. When the amount of seconds has passed, the client has to request a new email. Example --auth-signature-max-age 300 Default value 600 (10 minutes)","title":"Verification email max age"},{"location":"reference/#verified-session-max-age","text":"--verify-signature-max-age VERIFY_SIGNATURE_MAX_AGE Decides how many seconds a verified session cookie should be valid. When the amount of seconds has passed, the client has to verify again. Example --verify-signature-max-age 43200 Default value 86400 (24 hours)","title":"Verified session max age"},{"location":"reference/#example-using-all-arguments","text":"docker run --rm ghcr.io/flaeppe/access-guard:latest \\ \".*@test.com\" \\ --secret supersecret \\ --auth-host http://access-guard.localhost.com/ \\ --trusted-hosts access-guard access-guard.localhost.com \\ --cookie-domain localhost.com \\ --email-host mailhog \\ --email-port 1025 \\ --from-email access-guard@local.com \\ --host 0 .0.0.0 \\ --port 8585 \\ --email-username email-login \\ --email-password SecreT \\ --email-use-tls \\ --email-no-validate-certs \\ --email-client-cert /run/secret/smtp-cert \\ --email-client-key /run/secret/smtp-key \\ --email-subject \"You need to verify yourself\" \\ --cookie-secure \\ --auth-cookie-name local-access-guard-forwarded \\ --verified-cookie-name local-access-guard-session \\ --auth-cookie-max-age 3600 \\ --auth-signature-max-age 600 \\ --verify-signature-max-age 43200 Note All available arguments aren't included above, since some of them are mutually exclusive. In addition to the ones seen above the following arguments also exists: --secret-file --email-password-file --email-start-tls","title":"Example using all arguments"},{"location":"traefik/","text":"Info The example here expects that you have docker with compose installed on your computer. This is an example setup with traefik's forward auth via docker-compose that should be possible to start as is, with a slight configuration of a local hosts file pointing the .localhost.com domains to 127.0.0.1 . docker-compose.yml version : \"3.8\" services : traefik : image : traefik:v2.5 command : | --providers.docker --providers.docker.exposedByDefault=false --log.level=INFO --accesslog=true --entryPoints.web.address=:80 ports : - \"80:80\" volumes : - /var/run/docker.sock:/var/run/docker.sock whoami : image : traefik/whoami labels : traefik.enable : \"true\" traefik.http.routers.whoami.rule : \"Host(`whoami.localhost.com`)\" traefik.http.routers.whoami.middlewares : \"access-guard@docker\" access-guard : image : ghcr.io/flaeppe/access-guard command : [ \".*@test\\\\.com$$\" , \"--secret\" , \"supersecret\" , \"--auth-host\" , \"http://access-guard.localhost.com/\" , \"--trusted-hosts\" , \"access-guard\" , \"access-guard.localhost.com\" , \"--cookie-domain\" , \"localhost.com\" , \"--email-host\" , \"mailhog\" , \"--email-port\" , \"1025\" , \"--from-email\" , \"access-guard@local.com\" ] depends_on : - mailhog labels : traefik.enable : \"true\" traefik.http.routers.access-guard.rule : \"Host(`access-guard.localhost.com`)\" traefik.http.routers.access-guard.service : \"access-guard\" traefik.http.middlewares.access-guard.forwardauth.address : \"http://access-guard:8585/auth\" traefik.http.services.access-guard.loadbalancer.server.port : \"8585\" mailhog : image : mailhog/mailhog ports : - \"8025:8025\" Configuration walk-through There are 4 services that will be started from the configuration above: traefik An HTTP reverse proxy and load balancer, that'll be responsible for routing traffic to our services. whoami A dummy, whoami , service that'll act as a service that we want access-guard to verify authentication for before access is granted. access-guard The forward auth service, access-guard . This is where the traefik service will delegate authentication to, before granting access to the whoami service. mailhog Catchall service for emails, so that access-guard can send verification emails somewhere. The following label set on the access-guard service defines the entrypoint of the forward auth. This is where traefik will forward requests to see if they're granted access. traefik.http.middlewares.access-guard.forwardauth.address: \"http://access-guard:8585/auth\" Configured email domains are: .*@test.com which means that an email address ending with @test.com can receive emails with a verification link. If an email address is entered that doesn't end with @test.com , no email will be sent. The supersecret secret value is used for cryptographic signing of the \"magic link\" that'll be sent in the email by access-guard . Allowing us to verify that it is indeed access-guard that has created the \"magic link\" and that it hasn't been tampered with. The --auth-host value is the entrypoint URL for access-guard . This is the URL we intend clients to see in a browser's address bar while verifying. The --trusted-hosts values are the host values which access-guard should accept incoming traffic from. The --cookie-domain value is what access-guard will set as domain value on a cookie. The --email-host value is where access-guard 's SMTP client will send emails to. The --email-port value is the port of the SMTP server defined in --email-host . The --from-email value is what will become the sender's address in sent emails. With this setup, emails will be sent to the catchall service mailhog that'll be accessible at http://localhost:8025 . Trying it out Copy the service declaration from above to a docker-compose.yml file on your computer Add the configured hosts to your local hosts file (e.g. /etc/hosts ) Example /etc/hosts 127.0.0.1 whoami.localhost.com access-guard.localhost.com Start the services: docker-compose up -d Open http://whoami.localhost.com in your browser Enter an email that'll be accepted by access-guard (e.g. someone@test.com ) Open http://localhost:8025 in your browser Open the email and click on the link You should now be redirected to the whoami service at http://whoami.localhost.com A cookie is kept by your browser, so closing it there's no need to validate via email again for as long as that cookie is valid (default 24 hours).","title":"Use with traefik's forward auth"},{"location":"traefik/#configuration-walk-through","text":"There are 4 services that will be started from the configuration above: traefik An HTTP reverse proxy and load balancer, that'll be responsible for routing traffic to our services. whoami A dummy, whoami , service that'll act as a service that we want access-guard to verify authentication for before access is granted. access-guard The forward auth service, access-guard . This is where the traefik service will delegate authentication to, before granting access to the whoami service. mailhog Catchall service for emails, so that access-guard can send verification emails somewhere. The following label set on the access-guard service defines the entrypoint of the forward auth. This is where traefik will forward requests to see if they're granted access. traefik.http.middlewares.access-guard.forwardauth.address: \"http://access-guard:8585/auth\" Configured email domains are: .*@test.com which means that an email address ending with @test.com can receive emails with a verification link. If an email address is entered that doesn't end with @test.com , no email will be sent. The supersecret secret value is used for cryptographic signing of the \"magic link\" that'll be sent in the email by access-guard . Allowing us to verify that it is indeed access-guard that has created the \"magic link\" and that it hasn't been tampered with. The --auth-host value is the entrypoint URL for access-guard . This is the URL we intend clients to see in a browser's address bar while verifying. The --trusted-hosts values are the host values which access-guard should accept incoming traffic from. The --cookie-domain value is what access-guard will set as domain value on a cookie. The --email-host value is where access-guard 's SMTP client will send emails to. The --email-port value is the port of the SMTP server defined in --email-host . The --from-email value is what will become the sender's address in sent emails. With this setup, emails will be sent to the catchall service mailhog that'll be accessible at http://localhost:8025 .","title":"Configuration walk-through"},{"location":"traefik/#trying-it-out","text":"Copy the service declaration from above to a docker-compose.yml file on your computer Add the configured hosts to your local hosts file (e.g. /etc/hosts ) Example /etc/hosts 127.0.0.1 whoami.localhost.com access-guard.localhost.com Start the services: docker-compose up -d Open http://whoami.localhost.com in your browser Enter an email that'll be accepted by access-guard (e.g. someone@test.com ) Open http://localhost:8025 in your browser Open the email and click on the link You should now be redirected to the whoami service at http://whoami.localhost.com A cookie is kept by your browser, so closing it there's no need to validate via email again for as long as that cookie is valid (default 24 hours).","title":"Trying it out"}]}